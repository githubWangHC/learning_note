package com.caotong.windowmanager.timer.view;import android.animation.Keyframe;import android.animation.ObjectAnimator;import android.animation.PropertyValuesHolder;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.os.CountDownTimer;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import android.view.animation.AlphaAnimation;import android.view.animation.Animation;import android.widget.RelativeLayout;import android.widget.TextView;import com.caotong.windowmanager.timer.R;import com.caotong.windowmanager.timer.bean.MyApplication;import com.caotong.windowmanager.timer.manager.MyWindowManager;import com.caotong.windowmanager.timer.service.TimerService;import java.util.Timer;import java.util.TimerTask;/** * Created by caotong on 2017/5/22 */public class TimerNarrowView extends RelativeLayout {    public static int viewNarrowWidth;//view宽度    public static int viewNarrowHeight;    private WindowManager windowManager;    private WindowManager.LayoutParams mParams;    private float xInView;    private float yInView;    private float xInScreen;    private float yInScreen;    private float xDownInScreen;    private float yDownInScreen;    private int narrowMinute = 0;    private int narrowSecond = 0;    private Timer timer = new Timer();    private TimerTask timerTask;    private int END = 1;//标识计时结束    private AlphaAnimation alphaAnimation;    private ObjectAnimator objectAnimator;    private RelativeLayout narrowLayout;    private CountDownTimer countDownTimer;    private TextView narrowTextView;    private Handler mHandler = new Handler() {        public void handleMessage(Message msg) {            if (msg.what == 1) {                countDownTimer = new CountDownTimer(4000, 1000) {                    @Override                    public void onTick(long millisUntilFinished) {                    }                    @Override                    public void onFinish() {                        MyWindowManager.getInstance().removeNarrowWindow(getContext());                        try {                            timerTask.cancel();                            timer.cancel();                        } catch (NullPointerException e) {                        }                        Intent intent = new Intent(getContext(), TimerService.class);                        if (narrowMinute == 0 && narrowSecond == 0) {                            MyApplication.bStandardTimer = false;                        } else {                            MyApplication.getInstance().putInt("standard_minute", narrowMinute);                            MyApplication.getInstance().putInt("standard_second", narrowSecond);                            intent.putExtra("timer_msg", 4);                            getContext().startService(intent);                        }                        countDownTimer.cancel();                    }                };                countDownTimer.start();            } else {                timeProcess();            }        }    };    public TimerNarrowView(Context context) {        super(context);        initViews(context);    }    public TimerNarrowView(Context context, AttributeSet attrs) {        super(context, attrs);        initViews(context);    }    public TimerNarrowView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        initViews(context);    }    private void initViews(final Context context) {        narrowMinute = MyApplication.getInstance().getInt("standard_minute", 0);        narrowSecond = MyApplication.getInstance().getInt("standard_second", 0);        windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        LayoutInflater.from(context).inflate(R.layout.timer_narrow_layout, this);//        Log.i("time:", "create narrow");        View Layout = findViewById(R.id.timer_narrow_layout);        narrowLayout = (RelativeLayout) findViewById(R.id.timer_narrow_layout);        narrowTextView = (TextView) findViewById(R.id.timer_narrow_minute_textview);        viewNarrowWidth = Layout.getLayoutParams().width;        viewNarrowHeight = Layout.getLayoutParams().height;        narrowLayout.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                MyWindowManager.getInstance().removeNarrowWindow(getContext());                try {                    timerTask.cancel();                    timer.cancel();                } catch (NullPointerException e) {                }                Intent intent = new Intent(getContext(), TimerService.class);                if (narrowMinute == 0 && narrowSecond == 0) {                    intent.putExtra("timer_msg", 3);                    getContext().startService(intent);                    MyApplication.bStandardTimer = false;                } else {                    MyApplication.getInstance().putInt("standard_minute", narrowMinute);                    MyApplication.getInstance().putInt("standard_second", narrowSecond);                    intent.putExtra("timer_msg", 4);                    getContext().startService(intent);                }            }        });        narrowLayout.setOnTouchListener(new OnTouchListener() {            @Override            public boolean onTouch(View v, MotionEvent event) {                if (event.getAction() == MotionEvent.ACTION_DOWN) {                    xInView = event.getX();                    yInView = event.getY();                    xDownInScreen = event.getRawX();                    yDownInScreen = event.getRawY();                    xInScreen = event.getRawX();                    yInScreen = event.getRawY();                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {                    xInScreen = event.getRawX();                    yInScreen = event.getRawY();                    updateViewPosition();                } else if (event.getAction() == MotionEvent.ACTION_UP) {                    xInScreen = event.getRawX();                    yInScreen = event.getRawY();//                    Log.i("touch；", Math.abs(xInScreen - xDownInScreen) + " " + Math.abs(yInScreen - yDownInScreen));                    //这里必须判断  在TV上触摸屏判断要求很高 点击事件会和触摸事件起冲突                    if (Math.abs(xInScreen - xDownInScreen) < 5 && Math.abs(yInScreen - yDownInScreen) < 5) {                        return false;                    } else {                        return true;                    }                }                return false;            }        });        startTimer();    }    /**     * 启动倒计时     */    public void startTimer() {        timerTask = new TimerTask() {            @Override            public void run() {                mHandler.obtainMessage().sendToTarget();            }        };        timer.schedule(timerTask, 0, 1000);    }    /**     * narrow状态和standard状态移动位置同步     *     * @param params     */    public void setNarrowParams(WindowManager.LayoutParams params) {        mParams = params;        int timerX = MyApplication.getInstance().getInt("timer_x", 0);        int timerY = MyApplication.getInstance().getInt("timer_y", 0);        if (timerX == 0 && timerY == 0) {            mParams.x = windowManager.getDefaultDisplay().getWidth() / 2 - viewNarrowWidth / 2;            mParams.y = 188;        } else {            mParams.x = timerX;            mParams.y = timerY;        }//        LogHelper.e("timer:", "narrow+++++" + timerX + " . " + timerY);//        windowManager.updateViewLayout(this, mParams);    }    /**     * 改变windowmanager在屏幕中显示位置     */    private void updateViewPosition() {        mParams.x = (int) (xInScreen - xInView);        mParams.y = (int) (yInScreen - yInView);        MyApplication.getInstance().putInt("timer_x", mParams.x);        MyApplication.getInstance().putInt("timer_y", mParams.y);//        LogHelper.e("timer:", mParams.x + " . " + mParams.y);        windowManager.updateViewLayout(this, mParams);    }    public void timeProcess() {        if (narrowMinute == 0) {            if (narrowSecond == 0) {                narrowTextView.clearAnimation();//结束动画                if (objectAnimator != null)                    objectAnimator.cancel();                narrowTextView.setTextColor(Color.RED);                narrowTextView.setText(getResources().getString(R.string.timer_end));                Message msg = mHandler.obtainMessage();                msg.what = END;                msg.sendToTarget();                if (timer != null) {                    timer.cancel();                    timer = null;                }                if (timerTask != null) {                    timerTask = null;                }            } else {                narrowSecond--;                if (narrowSecond >= 10) {                    narrowTextView.setText("0" + narrowMinute + " : " + narrowSecond);                } else {                    alphaAnimation = new AlphaAnimation(0f, 1.0f);                    alphaAnimation.setDuration(900);                    alphaAnimation.setRepeatCount(Animation.INFINITE);                    narrowTextView.setAnimation(alphaAnimation);                    alphaAnimation.start();                    objectAnimator = shakeXY(narrowTextView, 1f);//                    objectAnimator.setRepeatCount(Animation.INFINITE);                    objectAnimator.start();                    narrowTextView.setTextColor(Color.RED);                    narrowTextView.setText("0" + narrowMinute + " : 0" + narrowSecond);                }            }        } else {            if (narrowSecond == 0) {                narrowSecond = 59;                narrowMinute--;                if (narrowMinute >= 10) {                    narrowTextView.setText(narrowMinute + " : " + narrowSecond);                } else {                    narrowTextView.setText("0" + narrowMinute + " : " + narrowSecond);                }            } else {                narrowSecond--;                if (narrowSecond >= 10) {                    if (narrowMinute >= 10) {                        narrowTextView.setText(narrowMinute + " : " + narrowSecond);                    } else {                        narrowTextView.setText("0" + narrowMinute + " : " + narrowSecond);                    }                } else {                    if (narrowMinute >= 10) {                        narrowTextView.setText(narrowMinute + " : 0" + narrowSecond);                    } else {                        narrowTextView.setText("0" + narrowMinute + " : 0" + narrowSecond);                    }                }            }        }    }    public ObjectAnimator shakeXY(View view, float shakeFactor) {        PropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofKeyframe(View.SCALE_X,                Keyframe.ofFloat(0f, 1f),                Keyframe.ofFloat(.1f, .9f),                Keyframe.ofFloat(.2f, .9f),                Keyframe.ofFloat(.3f, 1.1f),                Keyframe.ofFloat(.4f, 1.1f),                Keyframe.ofFloat(.5f, 1.1f),                Keyframe.ofFloat(.6f, 1.1f),                Keyframe.ofFloat(.7f, 1.1f),                Keyframe.ofFloat(.8f, 1.1f),                Keyframe.ofFloat(.9f, 1.1f),                Keyframe.ofFloat(1f, 1f)        );        PropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofKeyframe(View.SCALE_Y,                Keyframe.ofFloat(0f, 1f),                Keyframe.ofFloat(.1f, .9f),                Keyframe.ofFloat(.2f, .9f),                Keyframe.ofFloat(.3f, 1.1f),                Keyframe.ofFloat(.4f, 1.1f),                Keyframe.ofFloat(.5f, 1.1f),                Keyframe.ofFloat(.6f, 1.1f),                Keyframe.ofFloat(.7f, 1.1f),                Keyframe.ofFloat(.8f, 1.1f),                Keyframe.ofFloat(.9f, 1.1f),                Keyframe.ofFloat(1f, 1f)        );        PropertyValuesHolder pvhRotate = PropertyValuesHolder.ofKeyframe(View.ROTATION,                Keyframe.ofFloat(0f, 0f),                Keyframe.ofFloat(.1f, -3f * shakeFactor),                Keyframe.ofFloat(.2f, -3f * shakeFactor),                Keyframe.ofFloat(.3f, 3f * shakeFactor),                Keyframe.ofFloat(.4f, -3f * shakeFactor),                Keyframe.ofFloat(.5f, 3f * shakeFactor),                Keyframe.ofFloat(.6f, -3f * shakeFactor),                Keyframe.ofFloat(.7f, 3f * shakeFactor),                Keyframe.ofFloat(.8f, -3f * shakeFactor),                Keyframe.ofFloat(.9f, 3f * shakeFactor),                Keyframe.ofFloat(1f, 0)        );        return ObjectAnimator.ofPropertyValuesHolder(view, pvhScaleX, pvhScaleY, pvhRotate).                setDuration(1000);    }}