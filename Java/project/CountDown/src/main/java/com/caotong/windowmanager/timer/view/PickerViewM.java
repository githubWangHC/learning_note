package com.caotong.windowmanager.timer.view;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.view.MotionEvent;import android.view.View;import java.util.ArrayList;import java.util.List;import java.util.Timer;import java.util.TimerTask;/** * Created by caotong on 2016/12/13. */public class PickerViewM extends View {    public final float MARGIN_ALPHA = 1.3f; //text之间间距和minTextSize之比    public final float SPEED = 2;  //自动回滚到中间的速度    public static List<String> mDataList;    private static int mCurrentSelected;//选中的位置，这个位置是mDataList的中心位置，一直不变    private Paint mPaint;    @Override    public boolean callOnClick() {        return super.callOnClick();    }    // 滚动字体    private float mMaxTextSize = 105;    private float mMinTextSize = 80;    //滚动字体亮度    private float mMaxTextAlpha = 250;    private float mMinTextAlpha = 160;    private int mColorText = Color.BLACK;    private int mViewHeight;    private int mViewWidth;    private float mLastDownY;    // 滑动的距离    private float mMoveLen = 0;    private boolean bInit = false;    private static onSelectListener mSelectListener;    private Timer timer;    private MyTimerTask mTask;    Handler updateHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            if (Math.abs(mMoveLen) < SPEED) {                mMoveLen = 0;                if (mTask != null) {                    mTask.cancel();                    mTask = null;                    performSelect();                }            } else                // 根据正负结果判断上滚或下滚                mMoveLen = mMoveLen - mMoveLen / Math.abs(mMoveLen) * SPEED;            invalidate();        }    };    public PickerViewM(Context context) {        super(context);        init();    }    public PickerViewM(Context context, AttributeSet attrs) {        super(context, attrs);        init();    }    /**     * 设置滚动的集合值     */    public void setData(List<String> datas) {        mDataList = datas;        mCurrentSelected = datas.size() / 2;        invalidate();    }    /**     * 设置选中的item的index     */    public void setSelected(int selected) {//        Log.i("picker:", "select:" + selected);        mCurrentSelected = selected;        int distance = mDataList.size() / 2 - mCurrentSelected;//        Log.i("picker:", mCurrentSelected + " " + distance + "  " + mDataList.size());        if (distance < 0)            for (int i = 0; i < -distance; i++) {                moveHeadToTail();                mCurrentSelected--;            }        else if (distance > 0)            for (int i = 0; i < distance; i++) {                moveTailToHead();                mCurrentSelected++;            }        invalidate();    }    /**     * 选择选中的内容     */    public void setSelected(String mSelectItem) {        for (int i = 0; i < mDataList.size(); i++)            if (mDataList.get(i).equals(mSelectItem)) {                setSelected(i);                break;            }    }    /**     * 由上往下     */    private void moveHeadToTail() {        String head = mDataList.get(0);        mDataList.remove(0);        mDataList.add(head);    }    /**     * 由下往上     */    private void moveTailToHead() {        String tail = mDataList.get(mDataList.size() - 1);        mDataList.remove(mDataList.size() - 1);        mDataList.add(0, tail);    }    @Override    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        mViewHeight = getMeasuredHeight();        mViewWidth = getMeasuredWidth();        // 按照View的高度计算字体大小//        mMaxTextSize = mViewHeight / 3.0f;//        mMinTextSize = mMaxTextSize / 2f;        bInit = true;        invalidate();    }    private void init() {        timer = new Timer();        mDataList = new ArrayList<String>();        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);        mPaint.setStyle(Paint.Style.FILL);        mPaint.setTextAlign(Paint.Align.CENTER);        mPaint.setColor(mColorText);    }    @Override    protected void onDraw(Canvas canvas) {        super.onDraw(canvas);        // 根据index绘制view        if (bInit)            drawData(canvas);    }    /**     * 绘制时间   首先是选中时间     */    private void drawData(Canvas canvas) {        // 先绘制选中的text再往上往下绘制其余的text        float scale = parabola(mViewHeight / 4.0f, mMoveLen);        float size = (mMaxTextSize - mMinTextSize) * scale + mMinTextSize;        mPaint.setTextSize(size);        mPaint.setAlpha((int) ((mMaxTextAlpha - mMinTextAlpha) * scale + mMinTextAlpha));        // text居中绘制，以baseline为基准点的计算才能达到居中，y值是text中心坐标        float x = (float) (mViewWidth / 2.0);        float y = (float) (mViewHeight / 2.0 + mMoveLen);        Paint.FontMetricsInt fmi = mPaint.getFontMetricsInt();        float baseline = (float) (y - (fmi.bottom / 2.0 + fmi.top / 2.0));        canvas.drawText(mDataList.get(mCurrentSelected), x, baseline, mPaint);        // 绘制上方data        for (int i = 1; (mCurrentSelected - i) >= 0; i++) {            drawOtherText(canvas, i, -1);        }        // 绘制下方data        for (int i = 1; (mCurrentSelected + i) < mDataList.size(); i++) {            drawOtherText(canvas, i, 1);        }    }    /**     * 绘制上下未选中时间     *     * @param position 距离mCurrentSelected的差值     * @param type     1表示向下绘制，-1表示向上绘制     */    private void drawOtherText(Canvas canvas, int position, int type) {        float offset = (float) (MARGIN_ALPHA * mMinTextSize * position + type                * mMoveLen);//偏移量        float scale = parabola(mViewHeight / 4.0f, offset);        float size = (mMaxTextSize - mMinTextSize) * scale + mMinTextSize;        mPaint.setTextSize(size);        mPaint.setAlpha((int) ((mMaxTextAlpha - mMinTextAlpha) * scale + mMinTextAlpha));        float y = (float) (mViewHeight / 2.0 + type * offset);        Paint.FontMetricsInt fmi = mPaint.getFontMetricsInt();        float baseline = (float) (y - (fmi.bottom / 2.0 + fmi.top / 2.0));        canvas.drawText(mDataList.get(mCurrentSelected + type * position),                (float) (mViewWidth / 2.0), baseline, mPaint);    }    /**     * 抛物线     *     * @param zero 零点坐标     * @param x    偏移量     * @return scale     */    private float parabola(float zero, float x) {        float f = (float) (1 - Math.pow(x / zero, 2));        return f < 0 ? 0 : f;    }    @Override    public boolean onTouchEvent(MotionEvent event) {        switch (event.getActionMasked()) {            case MotionEvent.ACTION_DOWN:                doDown(event);                break;            case MotionEvent.ACTION_MOVE:                doMove(event);                break;            case MotionEvent.ACTION_UP:                doUp(event);                break;        }        return true;    }    private void doDown(MotionEvent event) {        if (mTask != null) {            mTask.cancel();            mTask = null;        }        mLastDownY = event.getY();    }    private void doMove(MotionEvent event) {        mMoveLen += (event.getY() - mLastDownY);        if (mMoveLen > MARGIN_ALPHA * mMinTextSize / 2) {            // 往下滑超过离开距离            moveTailToHead();            mMoveLen = mMoveLen - MARGIN_ALPHA * mMinTextSize;        } else if (mMoveLen < -MARGIN_ALPHA * mMinTextSize / 2) {            // 往上滑超过离开距离            moveHeadToTail();            mMoveLen = mMoveLen + MARGIN_ALPHA * mMinTextSize;        }        mLastDownY = event.getY();        invalidate();    }    private void doUp(MotionEvent event) {        // 抬起手后mCurrentSelected的位置由当前位置move到中间选中位置        if (Math.abs(mMoveLen) < 0.0001) {            mMoveLen = 0;            return;        }        if (mTask != null) {            mTask.cancel();            mTask = null;        }        mTask = new MyTimerTask(updateHandler);        timer.schedule(mTask, 0, 10);    }    class MyTimerTask extends TimerTask {        Handler handler;        public MyTimerTask(Handler handler) {            this.handler = handler;        }        @Override        public void run() {            handler.sendMessage(handler.obtainMessage());        }    }    public void setOnSelectListener(onSelectListener listener) {        mSelectListener = listener;    }    public static void performSelect() {        if (mSelectListener != null)            mSelectListener.onSelect(mDataList.get(mCurrentSelected));//        Log.i("picker:", "list:" + mDataList.get(mCurrentSelected) + "select:" + mCurrentSelected);    }    public interface onSelectListener {        void onSelect(String text);    }}