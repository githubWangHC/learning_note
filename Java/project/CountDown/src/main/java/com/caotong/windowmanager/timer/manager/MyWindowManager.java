package com.caotong.windowmanager.timer.manager;import android.content.Context;import android.graphics.PixelFormat;import android.util.Log;import android.view.Gravity;import android.view.WindowManager;import com.caotong.windowmanager.timer.view.TimerExpandView;import com.caotong.windowmanager.timer.view.TimerNarrowView;import com.caotong.windowmanager.timer.view.TimerStandardView;/** * Created by Administrator on 2017/4/25. */public class MyWindowManager {    /**     * 单例模式之饿汉加载     */    private static MyWindowManager mInstance = new MyWindowManager();    private MyWindowManager() {    }    public static MyWindowManager getInstance() {        return mInstance;    }    private WindowManager mWindowManager;    private TimerStandardView standardView;    private TimerNarrowView narrowView;    private TimerExpandView expandView;    private WindowManager.LayoutParams expandParams;    private WindowManager.LayoutParams narrowParams;    private WindowManager.LayoutParams standardParams;    /**     * 正常形态     */    public void createStandardTimerWindow(Context context) {        WindowManager windowManager = getWindowManager(context);        if (standardView == null) {            Log.i("timer:", "create standard");            standardView = new TimerStandardView(context);            if (standardParams == null) {                standardParams = new WindowManager.LayoutParams();                standardParams.type = WindowManager.LayoutParams.TYPE_PHONE;                standardParams.format = PixelFormat.RGBA_8888;                standardParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;                standardParams.width = TimerStandardView.viewStandardWidth;                standardParams.height = TimerStandardView.viewStandardHeight;                standardParams.gravity = Gravity.LEFT | Gravity.TOP;            }            standardView.setStandardParams(standardParams);            windowManager.addView(standardView, standardParams);        }    }    /**     * 缩小形态     */    public void createNarrowTimerWindow(Context context) {        WindowManager windowManager = getWindowManager(context);        if (narrowView == null) {            narrowView = new TimerNarrowView(context);            if (narrowParams == null) {                narrowParams = new WindowManager.LayoutParams();                narrowParams.type = WindowManager.LayoutParams.TYPE_PHONE;                narrowParams.format = PixelFormat.RGBA_8888;                narrowParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;                narrowParams.width = TimerNarrowView.viewNarrowWidth;                narrowParams.height = TimerNarrowView.viewNarrowHeight;                narrowParams.gravity = Gravity.LEFT | Gravity.TOP;            }            narrowView.setNarrowParams(narrowParams);            windowManager.addView(narrowView, narrowParams);        }    }    /**     * 全屏形态     */    public void createExpandTimerWindow(Context context) {        WindowManager windowManager = getWindowManager(context);        int screenWidth = windowManager.getDefaultDisplay().getWidth();        int screenHeight = windowManager.getDefaultDisplay().getHeight();        if (expandView == null) {            expandView = new TimerExpandView(context);            if (expandParams == null) {                expandParams = new WindowManager.LayoutParams();                expandParams.type = WindowManager.LayoutParams.TYPE_PHONE;                expandParams.format = PixelFormat.RGBA_8888;                expandParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;                expandParams.width = screenWidth;                expandParams.height = screenHeight;            }            windowManager.addView(expandView, expandParams);        }    }    /**     * remove 倒计时全屏     */    public void removeExpandWindow(Context context) {        if (expandView != null) {            WindowManager windowManager = getWindowManager(context);            windowManager.removeView(expandView);            expandView = null;        }    }    /**     * remove 倒计时正常     */    public void removeStandardWindow(Context context) {        if (standardView != null) {            WindowManager windowManager = getWindowManager(context);            windowManager.removeView(standardView);            standardView = null;            Log.i("timer:", "remove standard");        }    }    /**     * remove 倒计时小     */    public void removeNarrowWindow(Context context) {        if (narrowView != null) {            WindowManager windowManager = getWindowManager(context);            windowManager.removeView(narrowView);            narrowView = null;        }    }    public WindowManager getWindowManager(Context context) {        if (mWindowManager == null) {            mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        }        return mWindowManager;    }}