package com.caotong.windowmanager.timer.view;import android.content.Context;import android.os.CountDownTimer;import android.os.Handler;import android.os.Message;import android.util.AttributeSet;import android.util.Log;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import com.caotong.windowmanager.timer.R;import com.caotong.windowmanager.timer.bean.MyApplication;import com.caotong.windowmanager.timer.manager.MyWindowManager;import java.util.ArrayList;import java.util.List;import java.util.Timer;import java.util.TimerTask;public class TimerStandardView extends RelativeLayout implements View.OnClickListener {    private RelativeLayout standardLayout;    private RelativeLayout titleLayout;    private ImageView removeImage;    private LinearLayout pickerLayout;    private PickerViewM minute_pv;    private PickerView second_pv;    private LinearLayout showLayout;    private TextView showTextView;    private ImageButton refreshImageBtn;    private ImageButton playImageBtn;    private ImageButton expandImageBtn;    private List<String> minutes = new ArrayList<>();    private List<String> seconds = new ArrayList<>();    public static int viewStandardWidth;//view的宽度    public static int viewStandardHeight;    private WindowManager windowManager;    private WindowManager.LayoutParams mParams;    public static Integer minute = 0;//纪录分钟    public static Integer second = 0;//纪录秒    public static Integer refreshMinute = 0;//纪录刷新时间    public static Integer refreshSecond = 0;    private float xInView = 0;//相对view的X坐标    private float yInView = 0;    private float xInScreen = 0;//相对屏幕的X坐标    private float yInScreen = 0;    public static boolean expandClick = false;//全屏是否可点击    public static boolean playClick = false;    private Context mContext;    private Timer timer = new Timer();    private TimerTask timerTask;    private boolean bStartTimer;//切换播放暂停状态    private boolean bRefeshClick;//刷新是否可点击    private boolean bNarrowTimer;    private int COUNT_TIME_CANCLE = 1;//4秒倒计时取消    private int COUNT_TIME_START = 2;//开始4秒倒计时    private int COUNT_TIMER = 0;//倒计时算法    private CountDownTimer ct;    Handler mHandler = new Handler() {        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case 1:                    if (ct != null)                        ct.cancel();                    break;                case 2:                    if (playClick) {                        ct = new CountDownTimer(4000, 1000) {                            @Override                            public void onTick(long millisUntilFinished) {                            }                            @Override                            public void onFinish() {                                pauseTimer();                                MyApplication.getInstance().putInt("standard_minute", minute);                                MyApplication.getInstance().putInt("standard_second", second);                                MyWindowManager.getInstance().removeStandardWindow(mContext);                                MyWindowManager.getInstance().createNarrowTimerWindow(mContext);                            }                        };                        ct.start();                    }                    break;                case 0:                    timeProcess();                    break;            }            super.handleMessage(msg);        }    };    public TimerStandardView(Context context) {        super(context);        mContext = context;        initViews(context);    }    public TimerStandardView(Context context, AttributeSet attrs) {        super(context, attrs);        mContext = context;        initViews(context);    }    public TimerStandardView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        mContext = context;        initViews(context);    }    @Override    public boolean showContextMenuForChild(View originalView) {        return super.showContextMenuForChild(originalView);    }    private void initViews(Context context) {        windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);        LayoutInflater.from(context).inflate(R.layout.timer_standard_layout, this);        View layout = findViewById(R.id.standard_layout);        titleLayout = (RelativeLayout) findViewById(R.id.timer_title_layout);        removeImage = (ImageView) findViewById(R.id.remove_standard_timer);        pickerLayout = (LinearLayout) findViewById(R.id.picker_standard_timer);        showLayout = (LinearLayout) findViewById(R.id.show_standard_timer);        showTextView = (TextView) findViewById(R.id.show_textview_timer);        minute_pv = (PickerViewM) findViewById(R.id.minute_pv_timer);        second_pv = (PickerView) findViewById(R.id.second_pv_timer);        refreshImageBtn = (ImageButton) findViewById(R.id.refresh_button);        playImageBtn = (ImageButton) findViewById(R.id.play_button);        expandImageBtn = (ImageButton) findViewById(R.id.expand_button);        viewStandardWidth = layout.getLayoutParams().width;        viewStandardHeight = layout.getLayoutParams().height;        for (int j = 0; j < 60; j++) {            minutes.add(j < 10 ? "0" + j : "" + j);        }        minute_pv.setData(minutes);        minute_pv.setSelected(15);//初始化为0        minute = 15;        for (int i = 0; i < 60; i++) {            seconds.add(i < 10 ? "0" + i : "" + i);        }        second_pv.setData(seconds);        second_pv.setSelected(0);        //用来判断是否返回分秒皆为0        if (playClick) {            minute = MyApplication.getInstance().getInt("standard_minute", 0);            second = MyApplication.getInstance().getInt("standard_second", 0);//            Log.i("pciker:", minute + "" + second);            hideStandardLayout();            startTimer();        } else {            showStandardLayout();            int refresh_minute = MyApplication.getInstance().getInt("refresh_minute", 0);            int refresh_second = MyApplication.getInstance().getInt("refresh_second", 0);            if (refresh_minute != 0 || refresh_second != 0) {                pushPick(refresh_minute, refresh_second);            }        }        addListener();    }    private void addListener() {        minute_pv.setOnSelectListener(new PickerViewM.onSelectListener() {            @Override            public void onSelect(String text) {                if (!text.equals("")) {                    minute = Integer.parseInt(text);//                    Log.i("minuter:", minute + "");                }            }        });        second_pv.setOnSelectListener(new PickerView.onSelectListener() {            @Override            public void onSelect(String text) {                if (!text.equals("")) {                    second = Integer.parseInt(text);//                    Log.i("second:", second + "");                }            }        });        refreshImageBtn.setOnClickListener(this);        removeImage.setOnClickListener(this);        playImageBtn.setOnClickListener(this);        expandImageBtn.setOnClickListener(this);    }    @Override    public boolean onTouchEvent(MotionEvent event) {        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                Message msg = new Message();                msg.what = COUNT_TIME_CANCLE;                mHandler.sendMessage(msg);                xInView = event.getX();                yInView = event.getY();                xInScreen = event.getRawX();                yInScreen = event.getRawY();                break;            case MotionEvent.ACTION_MOVE:                xInScreen = event.getRawX();                yInScreen = event.getRawY();                updateViewPosition();                break;            case MotionEvent.ACTION_UP:                Message msgs = new Message();                msgs.what = COUNT_TIME_START;                mHandler.sendMessage(msgs);                break;        }        return true;    }    /**     * narrow状态和standard状态移动位置同步     * @param params     */    public void setStandardParams(WindowManager.LayoutParams params) {        mParams = params;        int timerX = MyApplication.getInstance().getInt("timer_x", 0);        int timerY = MyApplication.getInstance().getInt("timer_y", 0);        if (timerX == 0 && timerY == 0) {            mParams.x = windowManager.getDefaultDisplay().getWidth() / 2 - viewStandardWidth / 2;            mParams.y = 188;        } else {            mParams.x = timerX;            mParams.y = timerY;        }//        LogHelper.e("timer:", "standard+++++" + timerX + " . " + timerY);    }    /**     * 改变windowmanager在屏幕中显示位置     */    private void updateViewPosition() {        mParams.x = (int) (xInScreen - xInView);        mParams.y = (int) (yInScreen - yInView);        MyApplication.getInstance().putInt("timer_x", mParams.x);        MyApplication.getInstance().putInt("timer_y", mParams.y);//        LogHelper.e("timer:", mParams.x + " . " + mParams.y);        windowManager.updateViewLayout(this, mParams);    }    /**     * 显示时间界面     */    private void showStandardLayout() {        playClick = false;        playImageBtn.setBackgroundResource(R.drawable.timer_play_btn_selector);        pickerLayout.setVisibility(View.VISIBLE);        showLayout.setVisibility(View.GONE);        refreshImageBtn.setEnabled(true);        refreshImageBtn.setBackgroundResource(R.drawable.timer_reset_btn_selector);        expandImageBtn.setBackgroundResource(R.mipmap.expand_unclickable);        expandClick = false;    }    /**     * 隐藏时间界面     */    private void hideStandardLayout() {        playClick = true;        playImageBtn.setBackgroundResource(R.drawable.timer_pause_btn_selector);        pickerLayout.setVisibility(View.GONE);        showLayout.setVisibility(View.VISIBLE);        refreshImageBtn.setEnabled(false);        refreshImageBtn.setBackgroundResource(R.mipmap.reset_unclickable);        expandImageBtn.setBackgroundResource(R.drawable.timer_expand_btn_selector);        expandClick = true;    }    /**     * 开始倒计时     */    public void startTimer() {        if (!bStartTimer) {            timerTask = new TimerTask() {                @Override                public void run() {                    Message msg = new Message();                    msg.what = COUNT_TIMER;                    mHandler.sendMessage(msg);                }            };            timer.schedule(timerTask, 0, 1000);            bStartTimer = true;            Message msg = new Message();            msg.what = COUNT_TIME_START;            mHandler.sendMessage(msg);        }    }    /**     * 暂停倒计时     */    public void pauseTimer() {        if (bStartTimer) {            timerTask.cancel();            timer.purge();            bStartTimer = false;            Message msg = new Message();            msg.what = COUNT_TIME_CANCLE;            mHandler.sendMessage(msg);        }    }    /**     * 更新滚动条显示时间     */    private void pushPick(int pushMinute, int pushSecond) {//        if (pushMinute != 0) {        minute_pv.mDataList.clear();        for (int j = 0; j < 60; j++) {            minutes.add(j < 10 ? "0" + j : "" + j);        }        minute_pv.setData(minutes);        minute_pv.setSelected(pushMinute);        minute = pushMinute;//        }//        if (pushSecond != 0) {        second_pv.sDataList.clear();        for (int i = 0; i < 60; i++) {            seconds.add(i < 10 ? "0" + i : "" + i);        }        second_pv.setData(seconds);        second_pv.setSelected(pushSecond);        second = pushSecond;//        }    }    public void timeProcess() {        if (minute == 0) {            if (second == 0) {                showStandardLayout();                pauseTimer();                pushPick(0, 0);            } else {                second--;                if (second >= 10) {                    showTextView.setText("0" + minute + " : " + second);                } else {                    showTextView.setText("0" + minute + " : 0" + second);                }            }        } else {            if (second == 0) {                second = 59;                minute--;                if (minute >= 10) {                    showTextView.setText(minute + " : " + second);                } else {                    showTextView.setText("0" + minute + " : " + second);                }            } else {                second--;                if (second >= 10) {                    if (minute >= 10) {                        showTextView.setText(minute + " : " + second);                    } else {                        showTextView.setText("0" + minute + " : " + second);                    }                } else {                    if (minute >= 10) {                        showTextView.setText(minute + " : 0" + second);                    } else {                        showTextView.setText("0" + minute + " : 0" + second);                    }                }            }        }    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.remove_standard_timer:                MyWindowManager.getInstance().removeStandardWindow(getContext());                MyApplication.bStandardTimer = false;                minute = 0;                second = 0;                break;            case R.id.play_button:                if (minute != 0 || second != 0) {                    if (playClick) {                        pauseTimer();                        showStandardLayout();                        pushPick(minute, second);                        bRefeshClick = true;                    } else {                        startTimer();                        hideStandardLayout();                        bRefeshClick = false;                        refreshMinute = minute;                        refreshSecond = second;                        MyApplication.getInstance().putInt("refresh_minute", refreshMinute);                        MyApplication.getInstance().putInt("refresh_second", refreshSecond);                    }                }                break;            case R.id.expand_button:                if (expandClick) {                    pauseTimer();                    MyApplication.getInstance().putInt("standard_minute", minute);                    MyApplication.getInstance().putInt("standard_second", second);                    MyWindowManager.getInstance().createExpandTimerWindow(mContext);                    MyWindowManager.getInstance().removeStandardWindow(mContext);                }                break;            case R.id.refresh_button:                if (bRefeshClick) {                    pushPick(refreshMinute, refreshSecond);                }                break;        }    }}